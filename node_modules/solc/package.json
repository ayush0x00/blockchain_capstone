{
  "_args": [
    [
      "solc@^0.5.2",
      "/home/cipher/Desktop/capstone_blockchain"
    ]
  ],
  "_from": "solc@>=0.5.2 <0.6.0",
  "_hasShrinkwrap": false,
  "_id": "solc@0.5.17",
  "_inCache": true,
  "_installable": true,
  "_location": "/solc",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/solc_0.5.17_1584469915318_0.4984904300276607"
  },
  "_npmUser": {
    "email": "chris@ethereum.org",
    "name": "chriseth"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "solc",
    "raw": "solc@^0.5.2",
    "rawSpec": "^0.5.2",
    "scope": null,
    "spec": ">=0.5.2 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/solc/-/solc-0.5.17.tgz",
  "_shasum": "8a76c50e98d49ca7610cca2fdc78ff3016540c67",
  "_shrinkwrap": null,
  "_spec": "solc@^0.5.2",
  "_where": "/home/cipher/Desktop/capstone_blockchain",
  "author": {
    "name": "chriseth"
  },
  "bin": {
    "solcjs": "solcjs"
  },
  "bugs": {
    "url": "https://github.com/ethereum/solc-js/issues"
  },
  "dependencies": {
    "command-exists": "^1.2.8",
    "commander": "3.0.2",
    "fs-extra": "^0.30.0",
    "js-sha3": "0.8.0",
    "memorystream": "^0.3.1",
    "require-from-string": "^2.0.0",
    "semver": "^5.5.0",
    "tmp": "0.0.33"
  },
  "description": "Solidity compiler",
  "devDependencies": {
    "coveralls": "^3.0.0",
    "nyc": "^14.1.0",
    "semistandard": "^12.0.0",
    "tape": "^4.11.0",
    "tape-spawn": "^1.4.2"
  },
  "directories": {},
  "dist": {
    "fileCount": 12,
    "integrity": "sha512-qpX+PGaU0Q3c6lh2vDzMoIbhv6bIrecI4bYsx+xUs01xsGFnY6Nr0L8y/QMyutTnrHN6Lb/Yl672ZVRqxka96w==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJecRebCRA9TVsSAnZWagAAvIgP/Rdj4fMOqRn++xBaVSxo\nkzsdXuWkFiyi9tEXWVGV7RDP3ILgj7ZopOn2eaL+xGZCGdiswuGkePKhuqiH\nIN12j19DMrwYCd3SgQz0KBDJ4q65lHy5jdzyogneVt36gigDf/OeUAQyn1tc\nDk7Q16+OdfxyoHezHUV+w7GTnajWCXY62U5MFTJY+rl0UvwBRhhNGyL+V60I\nrRPKvOo2yf6EocjamQcq3Y+HxmFWQipMBQRH+2m27c0nvQW9EExG6cMQHE9w\nbU/D4Y0IXGM7Dtld+0iKN9pLDUtSeusXGGctKfB+sAyeUaEiLyg68V+HQKst\nC5S8Jcdmy2tc1HanLojccHzpDuK0WR0mK1VqUwWxXAIpVqjX9pjgMcM43ZOU\nPGaHeIAZv5mCjtcL6NZXGCJAqLaM7ZOqS1Jtf9Vxnb/FNVSDnagQ8JkaxAtc\nSKpquBGWBtn6LYFOy7su8IVqD0d9Cy2HGu2fW4/T6KtEbldzuiuhI6pO874T\n5/PWt5qvjL9AFX5ebC7mzpJJCsxvlmMGOYolcE/IsXendkVwepIrvp4ebgmq\nYv7D1FmspGMYfNUYWP+GVWT8t6uv3XqC1GGjL4puX8oUbNanXyMEQ2PB8fdL\nz+qDDjAegSjA8iI1j/bzp6gN1pNc+P0v2xoheBQ2PdiDKfYnxQuo61IY/d7Z\nZnHK\r\n=UiVe\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "8a76c50e98d49ca7610cca2fdc78ff3016540c67",
    "tarball": "https://registry.npmjs.org/solc/-/solc-0.5.17.tgz",
    "unpackedSize": 12434373
  },
  "gitHead": "d80b953ec65975d74f92c1253c3f6df09e06b555",
  "homepage": "https://github.com/ethereum/solc-js#readme",
  "keywords": [
    "compiler",
    "ethereum",
    "solidity"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chriseth",
      "email": "c@ethdev.com"
    },
    {
      "name": "d11e9",
      "email": "d11e9@turkd.net"
    }
  ],
  "name": "solc",
  "nyc": {
    "exclude": [
      "soljson.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://img.shields.io/travis/ethereum/solc-js.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereum/solc-js)\n[![CircleCI](https://img.shields.io/circleci/project/github/ethereum/solc-js/master.svg?style=flat-square)](https://circleci.com/gh/ethereum/solc-js/tree/master)\n[![Coverage Status](https://img.shields.io/coveralls/ethereum/solc-js.svg?style=flat-square)](https://coveralls.io/r/ethereum/solc-js)\n\n# solc-js\n\nJavaScript bindings for the [Solidity compiler](https://github.com/ethereum/solidity).\n\nUses the Emscripten compiled Solidity found in the [solc-bin repository](https://github.com/ethereum/solc-bin).\n\n## Node.js Usage\n\nTo use the latest stable version of the Solidity compiler via Node.js you can install it via npm:\n\n```bash\nnpm install solc\n```\n\n### Usage on the Command-Line\n\nIf this package is installed globally (`npm install -g solc`), a command-line tool called `solcjs` will be available.\n\nTo see all the supported features, execute:\n\n```bash\nsolcjs --help\n```\n\nNote: this commandline interface is not compatible with `solc` provided by the Solidity compiler package and thus cannot be\nused in combination with an Ethereum client via the `eth.compile.solidity()` RPC method. Please refer to the\n[Solidity compiler documentation](https://solidity.readthedocs.io/) for instructions to install `solc`.\nFurthermore, the commandline interface to solc-js provides fewer features than the binary release.\nOne of the missing features is automatic loading of files from the filesystem if they are not explicitly\nmentioned on the command line.\n\n### Usage in Projects\n\nThere are two ways to use `solc`:\n\n1. Through a high-level API giving a uniform interface to all compiler versions\n2. Through a low-level API giving access to all the compiler interfaces, which depend on the version of the compiler\n\n#### High-level API\n\nThe high-level API consists of a single method, `compile`, which expects the [Compiler Standard Input and Output JSON](https://solidity.readthedocs.io/en/v0.5.0/using-the-compiler.html#compiler-input-and-output-json-description).\n\nIt also accepts an optional callback function to resolve unmet dependencies. This callback receives a path and must synchronously return either an error or the content of the dependency as a string.\nIt cannot be used together with callback-based, asynchronous, filesystem access. A workaround is to collect the names of dependencies, return an error, and keep re-running the compiler until all\nof them are resolved.\n\nStarting 0.5.12 it also accepts an object in place of the callback to supply different kind of callbacks, however only file imports are supported.\n\n_Note_: as an intermittent backwards compatibility feature, between versions 0.5.0 and 0.5.2, `compileStandard` and `compileStandardWrapper` also exists and behave like `compile` does.\n\n#### Example usage without the import callback\n\nExample:\n\n```javascript\nvar solc = require('solc');\n\nvar input = {\n  language: 'Solidity',\n  sources: {\n    'test.sol': {\n      content: 'contract C { function f() public { } }'\n    }\n  },\n  settings: {\n    outputSelection: {\n      '*': {\n        '*': ['*']\n      }\n    }\n  }\n};\n\nvar output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n// `output` here contains the JSON output as specified in the documentation\nfor (var contractName in output.contracts['test.sol']) {\n  console.log(\n    contractName +\n      ': ' +\n      output.contracts['test.sol'][contractName].evm.bytecode.object\n  );\n}\n```\n\n#### Example usage with import callback\n\n```javascript\nvar solc = require('solc');\n\nvar input = {\n  language: 'Solidity',\n  sources: {\n    'test.sol': {\n      content: 'import \"lib.sol\"; contract C { function f() public { L.f(); } }'\n    }\n  },\n  settings: {\n    outputSelection: {\n      '*': {\n        '*': ['*']\n      }\n    }\n  }\n};\n\nfunction findImports(path) {\n  if (path === 'lib.sol')\n    return {\n      contents:\n        'library L { function f() internal returns (uint) { return 7; } }'\n    };\n  else return { error: 'File not found' };\n}\n\n// Current syntax\nvar output = JSON.parse(solc.compile(JSON.stringify(input), findImports));\n\n// New syntax (supported from 0.5.12)\nvar output = JSON.parse(\n  solc.compile(JSON.stringify(input), { import: findImports })\n);\n\n// `output` here contains the JSON output as specified in the documentation\nfor (var contractName in output.contracts['test.sol']) {\n  console.log(\n    contractName +\n      ': ' +\n      output.contracts['test.sol'][contractName].evm.bytecode.object\n  );\n}\n```\n\n#### Low-level API\n\nThe low-level API is as follows:\n\n- `solc.lowlevel.compileSingle`: the original entry point, supports only a single file\n- `solc.lowlevel.compileMulti`: this supports multiple files, introduced in 0.1.6\n- `solc.lowlevel.compileCallback`: this supports callbacks, introduced in 0.2.1\n- `solc.lowlevel.compileStandard`: this works just like `compile` above, but is only present in compilers after (and including) 0.4.11\n\nFor examples how to use them, please refer to the README of the above mentioned solc-js releases.\n\n### Using with Electron\n\n**Note:**\nIf you are using Electron, `nodeIntegration` is on for `BrowserWindow` by default. If it is on, Electron will provide a `require` method which will not behave as expected and this may cause calls, such as `require('solc')`, to fail.\n\nTo turn off `nodeIntegration`, use the following:\n\n```javascript\nnew BrowserWindow({\n  webPreferences: {\n    nodeIntegration: false\n  }\n});\n```\n\n### Using a Legacy Version\n\nIn order to compile contracts using a specific version of Solidity, the `solc.loadRemoteVersion(version, callback)` method is available. This returns a new `solc` object that uses a version of the compiler specified.\n\nYou can also load the \"binary\" manually and use `setupMethods` to create the familiar wrapper functions described above:\n`var solc = solc.setupMethods(require(\"/my/local/soljson.js\"))`.\n\n### Using the Latest Development Snapshot\n\nBy default, the npm version is only created for releases. This prevents people from deploying contracts with non-release versions because they are less stable and harder to verify. If you would like to use the latest development snapshot (at your own risk!), you may use the following example code.\n\n```javascript\nvar solc = require('solc');\n\n// getting the development snapshot\nsolc.loadRemoteVersion('latest', function(err, solcSnapshot) {\n  if (err) {\n    // An error was encountered, display and quit\n  } else {\n    // NOTE: Use `solcSnapshot` here with the same interface `solc` has\n  }\n});\n```\n\n### Linking Bytecode\n\nWhen using libraries, the resulting bytecode will contain placeholders for the real addresses of the referenced libraries. These have to be updated, via a process called linking, before deploying the contract.\n\nThe `linker` module (`require('solc/linker')`) offers helpers to accomplish this.\n\nThe `linkBytecode` method provides a simple helper for linking:\n\n```javascript\nvar linker = require('solc/linker');\n\nbytecode = linker.linkBytecode(bytecode, { MyLibrary: '0x123456...' });\n```\n\nAs of Solidity 0.4.11 the compiler supports [standard JSON input and output](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description) which outputs a _link references_ map. This gives a map of library names to offsets in the bytecode to replace the addresses at. It also doesn't have the limitation on library file and contract name lengths.\n\nThere is a method available in the `linker` module called `findLinkReferences` which can find such link references in bytecode produced by an older compiler:\n\n```javascript\nvar linker = require('solc/linker');\n\nvar linkReferences = linker.findLinkReferences(bytecode);\n```\n\n### Updating the ABI\n\nThe ABI generated by Solidity versions can differ slightly, due to new features introduced. There is a tool included which aims to translate the ABI generated by an older Solidity version to conform to the latest standard.\n\nIt can be used as:\n\n```javascript\nvar abi = require('solc/abi');\n\nvar inputABI = [\n  {\n    constant: false,\n    inputs: [],\n    name: 'hello',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    type: 'function'\n  }\n];\nvar outputABI = abi.update('0.3.6', inputABI);\n// Output contains: [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"type\":\"function\"},{\"type\":\"fallback\",\"payable\":true}]\n```\n\n### Formatting old JSON assembly output\n\nThere is a helper available to format old JSON assembly output into a text familiar to earlier users of Remix IDE.\n\n```\nvar translate = require('solc/translate')\n\n// assemblyJSON refers to the JSON of the given assembly and sourceCode is the source of which the assembly was generated from\nvar output = translate.prettyPrintLegacyAssemblyJSON(assemblyJSON, sourceCode)\n```\n\n## Browser Usage\n\nAdd the version of `solc` you want to use into `index.html`:\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"https://solc-bin.ethereum.org/bin/{{ SOLC VERSION }}.js\"\n></script>\n```\n\n(Alternatively use `https://solc-bin.ethereum.org/bin/soljson-latest.js` to get the latests version.)\n\nThis will load `solc` into the global variable `window.Module`. Then use this inside Javascript as:\n\n```javascript\nvar wrapper = require('solc/wrapper');\nvar solc = wrapper(window.Module);\n```\n\nOr in ES6 syntax:\n\n```javascript\nimport * as wrapper from 'solc/wrapper';\nconst solc = wrapper(window.Module);\n```\n\nAlternatively, to iterate the releases, one can load `list.js` from `solc-bin`:\n\n```html\n<script\n  type=\"text/javascript\"\n  src=\"https://solc-bin.ethereum.org/bin/list.js\"\n></script>\n```\n\nThis will result in two global variables, `window.soljsonReleases` listing all releases and `window.soljsonSources` listing all nightly builds and releases.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/solc-js.git"
  },
  "scripts": {
    "coverage": "node ./node_modules/nyc/bin/nyc.js --reporter=lcov --reporter=text-summary ./node_modules/tape/bin/tape ./test/index.js",
    "coveralls": "npm run coverage && node ./node_modules/coveralls/bin/coveralls.js <coverage/lcov.info",
    "lint": "node ./node_modules/semistandard/bin/cmd.js",
    "prepublish": "node downloadCurrentVersion.js && node verifyVersion.js",
    "pretest": "npm run lint",
    "test": "tape ./test/index.js"
  },
  "semistandard": {
    "ignore": [
      "soljson.js"
    ]
  },
  "version": "0.5.17"
}
